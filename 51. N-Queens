class Solution {
    public void solve(int col,char[][] board,List<List<String>> res,int[] left, int[] upperDiagonal, int[] lowerDiagonal){
        if(col==board.length){
            res.add(construct_board(board));
            return;
        }
        for(int i=0;i<board.length;i++){
            if(left[i]==0 && upperDiagonal[i+col]==0 && lowerDiagonal[board.length-1+i-col]==0){
                board[i][col]='Q';
                left[i]=1;
                upperDiagonal[i+col]=1;
                lowerDiagonal[board.length-1+i-col]=1;
                solve(col+1,board, res, left, upperDiagonal, lowerDiagonal);
                board[i][col]='.';
                left[i]=0;
                upperDiagonal[i+col]=0;
                lowerDiagonal[board.length-1+i-col]=0;
            }
        }
    }
    public List<String> construct_board(char[][] board){
        List<String> res=new LinkedList<>();
        for(int i=0;i<board.length;i++){
            String s=new String(board[i]);
            res.add(s);
        }
        return res;
    }
    public List<List<String>> solveNQueens(int n) {
        char[][] board=new char[n][n];
        for(int i=0;i<n;i++){
            for(int j=0;j<n;j++){
                board[i][j]='.';
            }
        }
        List<List<String>> res=new ArrayList<>();
        int[] left=new int[n];
        int[] upperDiagonal=new int[2*n-1];
        int[] lowerDiagonal= new int[2*n-1];
        solve(0,board,res,left,upperDiagonal,lowerDiagonal);
        return res;
    }
}
